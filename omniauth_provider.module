<?php
// $Id$

/**
 * @file
 *
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 * Felix Delattre <felix.delattre@erdfisch.de>
 */

/**
 * Implement HOOK_menu_alter().
 */
function omniauth_provider_menu_alter(&$items) {
  // Remove OpenID Provider information from profile page
  $items['user/%user/openid-sites']['access callback'] = 'user_access';
  $items['user/%user/openid-sites']['access arguments'] = array('administer openid provider');
}

/**
 * Implement HOOK_user().
 */
function omniauth_provider_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      // Auto create profile node when user is created
      $node = new stdClass();
      $node->type = 'profile';
      $node->uid = $account->uid;
      $node->status = 1;
      $node->log = t('Auto created by Omniauth provider');
      $node->title = ucfirst($account->name);
      node_save($node);
      break;
    case 'view':
      if (!user_access('administer openid provider')) {
        unset($account->content['openid']);
      }
      break;
  }
}

/**
 * Implement HOOK_form_FORM_ID_alter().
 */
function omniauth_provider_form_profile_node_form_alter(&$form, &$form_state) {
  // Hide from normal users
  if (!user_access('administer content')) {
    $form['title']['#type'] = 'value';
    $form['body_field']['#type'] = 'value';
  }
}

/**
 * Implement HOOK_block().
 */
function omniauth_provider_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    $blocks[0] = array(
      'info' => t('List of relying parties'),
    );
    return $blocks;
  }
  else if ($op == 'configure' && $delta == 0) {
  }
  else if ($op == 'save' && $delta == 0) {
  }
  else if ($op == 'view') {
    switch($delta) {
      case 0:
        $block = array(
          'subject' => t('Relying Parties'),
          'content' => omniauth_provider_block_1()
        );
        break;
    }
    return $block;
  }
}

/**
 *
 */
function omniauth_provider_block_1() {
  $items = array();
  $realms = openid_provider_sso_relying_parties();
  foreach ($realms as $rp) {
    $items[] = '<strong>'. l(check_plain($rp['name']), check_url($rp['realm'])) .'</strong> '. check_url($rp['realm']);
  }
  return theme('item_list', $items, NULL, 'ol');
}

